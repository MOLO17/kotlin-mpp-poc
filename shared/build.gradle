apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    targets {
        // `SDK_NAME` is an env variable that Xcode sets when launching a script from a build step.
        // Since the framework building is meant to be started from Xcode as a build step, we check here
        // what kind of cpu architecture use for compilation.
        final def iOSPreset = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
            ? presets.iosArm64 : presets.iosX64

        // iosArm64 targets physical devices. Use iosX64 for simulators.
        fromPreset(iOSPreset, 'iOS') {
            compilations.main.outputKinds('FRAMEWORK')
        }
        // Note that one of the Android Gradle plugins should be applied before the android preset is created.
        // That's why we import `com.android.library` on top.
        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }

        commonTest {
            dependencies {
                
            }
        }

        androidMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

//
// Xcode Framework creation
//

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode